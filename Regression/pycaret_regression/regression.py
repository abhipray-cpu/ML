# -*- coding: utf-8 -*-
"""Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QBn3-FcG0bryen_r1behPo4E_lHM6JRH
"""

from pycaret.datasets import get_data
data=get_data('boston')

from pycaret.regeression import *

#here are all the different models available to us
'''‘lr’ - Linear Regression

‘lasso’ - Lasso Regression

‘ridge’ - Ridge Regression

‘en’ - Elastic Net

‘lar’ - Least Angle Regression

‘llar’ - Lasso Least Angle Regression

‘omp’ - Orthogonal Matching Pursuit

‘br’ - Bayesian Ridge

‘ard’ - Automatic Relevance Determination

‘par’ - Passive Aggressive Regressor

‘ransac’ - Random Sample Consensus

‘tr’ - TheilSen Regressor

‘huber’ - Huber Regressor

‘kr’ - Kernel Ridge

‘svm’ - Support Vector Regression

‘knn’ - K Neighbors Regressor

‘dt’ - Decision Tree Regressor

‘rf’ - Random Forest Regressor

‘et’ - Extra Trees Regressor

‘ada’ - AdaBoost Regressor

‘gbr’ - Gradient Boosting Regressor

‘mlp’ - MLP Regressor

‘xgboost’ - Extreme Gradient Boosting

‘lightgbm’ - Light Gradient Boosting Machine

‘catboost’ - CatBoost Regressor'''

exp=setup(data,target='medv')

compare_models()

model=create_model('model_name')

model_tune=tune_model(model)#this will give us a tuned model

model_ensemble=enesemble_model(model_tune)#this will give us a further tuned model using the enesemble learning method

"""Baki vo stack and bundle toe baadmei smjhe gae"""

#visualizing we can simplt use evaluate_model function whichh will priovide us with a gui

evaluate_model(model_ensemble)

#we can also interperet the model
interpret_model(model_ensemble) #this fuction is reserved only for tree based models

#predicting on unseen data
pred_unseen = predict_model(model_ensembele, data = data)

#deploying on cloud
deploy_model(model = lr, model_name = 'lr-for-deployment', platform = 'aws', authentication = {'bucket' : 'S3-bucket-name'})

#saving the model
#simply use the save model for this task